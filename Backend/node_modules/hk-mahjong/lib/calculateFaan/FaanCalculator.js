"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HandTypeFinder_1 = require("../hand/handType/HandTypeFinder");
const isThirteenOrphans_1 = require("../hand/handType/isThirteenOrphans");
const Hand_1 = require("../hand/Hand");
const Glossaary_1 = require("./Glossaary");
/**
 * This class provides the static method that calculates the Faan value of a WinningHand.
 */
class FaanCalculator {
    /**
     * Access the static Faan value threshold of FaanCalculator.
     * @returns {number} the static Faan value threshold of FaanCalculator.
     */
    static getThresholdFaanValue() {
        return FaanCalculator.THRESHOLD_OF_VALID_WINNING_HAND;
    }
    /**
     * Mutate the static Faan value threshold of FaanCalculator.
     * @param value the new static Faan value threshold of FaanCalculator.
     */
    static setThresholdFaanValue(value) {
        FaanCalculator.THRESHOLD_OF_VALID_WINNING_HAND = value;
    }
    /**
     * Access the static maximum Faan value of FaanCalculator.
     * @returns {number} the static maximum Faan value of FaanCalculator.
     */
    // public static getMaxFaanValue(): number {
    //   return FaanCalculator.MAX_FAAN_VALUE;
    // }
    /**
     * Mutate the static maximum Faan value of FaanCalculator.
     * @param value the new static maximum Faan value of FaanCalculator.
     */
    // public static setMaxFaanValue(value: number): void {
    //   FaanCalculator.MAX_FAAN_VALUE = value;
    // }
    static setLanguage(languageInput) {
        this.language = languageInput;
    }
    /**
     * Calculate the Faan value of the inputWinningHand.
     * @param inputWinningHand the WinningHand of which the Faan value has to be calculated.
     * @param config configuration for the calculation of the Faan value.
     * @returns {CalculationResult} the Faan value.
     */
    static calculate(inputWinningHand, config) {
        Glossaary_1.default.setLanguage(this.language);
        let winningHand;
        let result = 0;
        if (inputWinningHand instanceof Hand_1.default) {
            if (config !== undefined) {
                if (HandTypeFinder_1.default.isEightImmortalsCrossingTheSea(inputWinningHand, config)) {
                    return {
                        value: '∞',
                        details: [
                            {
                                name: Glossaary_1.default.get()['eightImmortalsCrossingTheSea'],
                                value: '∞',
                            },
                        ],
                    };
                }
                if (HandTypeFinder_1.default.isFlowerHand(inputWinningHand, config)) {
                    return {
                        value: FaanCalculator.ADDITIONAL_FAAN_MAP['flowerHand'],
                        details: [
                            {
                                name: Glossaary_1.default.get()['flowerHand'],
                                value: FaanCalculator.ADDITIONAL_FAAN_MAP['flowerHand'],
                            },
                        ],
                    };
                }
            }
            if (inputWinningHand.isWinningHand()) {
                winningHand = inputWinningHand.findAllWinningPermutations()[0];
            }
            else {
                return {
                    value: 0,
                    details: [],
                };
            }
        }
        else {
            winningHand = inputWinningHand;
        }
        if (FaanCalculator.hasMaxFaan(winningHand, config)) {
            if ((0, isThirteenOrphans_1.isThirteenOrphansAsWinningHand)(winningHand)) {
                return {
                    details: [
                        {
                            name: Glossaary_1.default.get()['thirteenOrphans'],
                            value: '∞',
                        },
                    ],
                    value: '∞',
                };
            }
            else if (HandTypeFinder_1.default.isAllKongs(winningHand)) {
                return {
                    details: [
                        {
                            name: Glossaary_1.default.get()['allKongs'],
                            value: '∞',
                        },
                    ],
                    value: '∞',
                };
            }
            else if (HandTypeFinder_1.default.isOrphans(winningHand)) {
                return {
                    details: [
                        {
                            name: Glossaary_1.default.get()['orphans'],
                            value: '∞',
                        },
                    ],
                    value: '∞',
                };
            }
            else if (HandTypeFinder_1.default.isNineGates(winningHand)) {
                return {
                    details: [
                        {
                            name: Glossaary_1.default.get()['nineGates'],
                            value: '∞',
                        },
                    ],
                    value: '∞',
                };
            }
            else if (HandTypeFinder_1.default.isAllHonors(winningHand)) {
                return {
                    details: [
                        {
                            name: Glossaary_1.default.get()['allHonors'],
                            value: '∞',
                        },
                    ],
                    value: '∞',
                };
            }
            else if (HandTypeFinder_1.default.isGreatDragon(winningHand)) {
                return {
                    details: [
                        {
                            name: Glossaary_1.default.get()['greatDragon'],
                            value: '∞',
                        },
                    ],
                    value: '∞',
                };
            }
            else if (HandTypeFinder_1.default.isGreatWinds(winningHand)) {
                return {
                    details: [
                        {
                            name: Glossaary_1.default.get()['greatWind'],
                            value: '∞',
                        },
                    ],
                    value: '∞',
                };
            }
            else if (HandTypeFinder_1.default.isSmallWinds(winningHand)) {
                return {
                    details: [
                        {
                            name: Glossaary_1.default.get()['smallWind'],
                            value: '∞',
                        },
                    ],
                    value: '∞',
                };
            }
            else if (HandTypeFinder_1.default.isWinByDoubleKong(winningHand, config)) {
                return {
                    details: [
                        {
                            name: Glossaary_1.default.get()['winByDoubleKong'],
                            value: '∞',
                        },
                    ],
                    value: '∞',
                };
            }
            else {
                return {
                    details: [
                        {
                            name: Glossaary_1.default.get()['kaanKaanHand'],
                            value: '∞',
                        },
                    ],
                    value: '∞',
                };
            }
        }
        else if (HandTypeFinder_1.default.isFlowerHand(winningHand, config)) {
            return {
                value: FaanCalculator.ADDITIONAL_FAAN_MAP['flowerHand'],
                details: [
                    {
                        name: Glossaary_1.default.get()['flowerHand'],
                        value: '∞',
                    },
                ],
            };
        }
        else {
            const melds = winningHand.getMelds();
            const details = [];
            if (config) {
                if (config['heavenlyHand'] === true && config['earthlyHand'] === true) {
                    throw new Error('"heavenlyHand" and "earthlyHand" are mutually exclusive');
                }
                if (config['enableBonusFaanDueToZeroExtraTile'] && config['extraTiles'] !== undefined) {
                    let hasBonusFaanDueToZeroExtraTile = true;
                    for (const [key, value] of Object.entries(config['extraTiles'])) {
                        if (value !== false) {
                            hasBonusFaanDueToZeroExtraTile = false;
                        }
                    }
                    if (hasBonusFaanDueToZeroExtraTile) {
                        result += FaanCalculator.ADDITIONAL_FAAN_MAP['bonusFaanDueToZeroExtraTile'];
                        details.push({
                            name: Glossaary_1.default.get()['noFlowers'],
                            value: FaanCalculator.ADDITIONAL_FAAN_MAP['bonusFaanDueToZeroExtraTile'],
                        });
                    }
                }
                if (config['heavenlyHand'] === true) {
                    return {
                        value: '∞',
                        details: [
                            {
                                name: Glossaary_1.default.get()['heavenlyHand'],
                                value: '∞',
                            },
                        ],
                    };
                }
                else if (config['earthlyHand'] === true) {
                    return {
                        value: '∞',
                        details: [
                            {
                                name: Glossaary_1.default.get()['earthlyHand'],
                                value: '∞',
                            },
                        ],
                    };
                }
                if (config['winByKong'] === true && config['winByDoubleKong'] === true) {
                    throw new Error('"winByKong" and "winByDoubleKong" are mutually exclusive');
                }
                if (config['robbingKong'] === true && config['winByLastCatch'] === true) {
                    throw new Error('"robbingKong" and "winByLastCatch" are mutually exclusive');
                }
                if (config['selfPick'] === true) {
                    if (config['winByKong'] === true) {
                        result += FaanCalculator.ADDITIONAL_FAAN_MAP['winByKong'];
                        details.push({
                            name: Glossaary_1.default.get()['winByKong'],
                            value: FaanCalculator.ADDITIONAL_FAAN_MAP['winByKong'],
                        });
                    }
                    else {
                        result += FaanCalculator.ADDITIONAL_FAAN_MAP['selfPick'];
                        details.push({
                            name: Glossaary_1.default.get()['selfPick'],
                            value: FaanCalculator.ADDITIONAL_FAAN_MAP['selfPick'],
                        });
                    }
                }
                else {
                    if (config['winByKong'] === true) {
                        result += FaanCalculator.ADDITIONAL_FAAN_MAP['winByKong'];
                        details.push({
                            name: Glossaary_1.default.get()['winByKong'],
                            value: FaanCalculator.ADDITIONAL_FAAN_MAP['winByKong'],
                        });
                    }
                }
                if (config['robbingKong'] === true) {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['robbingKong'];
                    details.push({
                        name: Glossaary_1.default.get()['robbingKong'],
                        value: FaanCalculator.ADDITIONAL_FAAN_MAP['robbingKong'],
                    });
                }
                else if (config['winByLastCatch'] === true) {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['winByLastCatch'];
                    details.push({
                        name: Glossaary_1.default.get()['winByLastCatch'],
                        value: FaanCalculator.ADDITIONAL_FAAN_MAP['winByLastCatch'],
                    });
                }
                if (config['fullyConcealedHand'] === true) {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['fullyConcealedHand'];
                    details.push({
                        name: Glossaary_1.default.get()['fullyConcealedHand'],
                        value: FaanCalculator.ADDITIONAL_FAAN_MAP['fullyConcealedHand'],
                    });
                }
                if (config['seatWind']) {
                    switch (config['seatWind']) {
                        case 'east':
                            if (FaanCalculator.hasPongOrKong(melds, '🀀')) {
                                result += FaanCalculator.ADDITIONAL_FAAN_MAP['matchSeatWind'];
                                details.push({
                                    name: Glossaary_1.default.get()['seatWind'],
                                    value: FaanCalculator.ADDITIONAL_FAAN_MAP['matchSeatWind'],
                                });
                            }
                            break;
                        case 'south':
                            if (FaanCalculator.hasPongOrKong(melds, '🀁')) {
                                result += FaanCalculator.ADDITIONAL_FAAN_MAP['matchSeatWind'];
                                details.push({
                                    name: Glossaary_1.default.get()['seatWind'],
                                    value: FaanCalculator.ADDITIONAL_FAAN_MAP['matchSeatWind'],
                                });
                            }
                            break;
                        case 'west':
                            if (FaanCalculator.hasPongOrKong(melds, '🀂')) {
                                result += FaanCalculator.ADDITIONAL_FAAN_MAP['matchSeatWind'];
                                details.push({
                                    name: Glossaary_1.default.get()['seatWind'],
                                    value: FaanCalculator.ADDITIONAL_FAAN_MAP['matchSeatWind'],
                                });
                            }
                            break;
                        case 'north':
                            if (FaanCalculator.hasPongOrKong(melds, '🀃')) {
                                result += FaanCalculator.ADDITIONAL_FAAN_MAP['matchSeatWind'];
                                details.push({
                                    name: Glossaary_1.default.get()['seatWind'],
                                    value: FaanCalculator.ADDITIONAL_FAAN_MAP['matchSeatWind'],
                                });
                            }
                            break;
                        default:
                    }
                }
                if (config['roundWind']) {
                    switch (config['roundWind']) {
                        case 'east':
                            if (FaanCalculator.hasPongOrKong(melds, '🀀')) {
                                result += FaanCalculator.ADDITIONAL_FAAN_MAP['matchRoundWind'];
                                details.push({
                                    name: Glossaary_1.default.get()['roundWind'],
                                    value: FaanCalculator.ADDITIONAL_FAAN_MAP['matchRoundWind'],
                                });
                            }
                            break;
                        case 'south':
                            if (FaanCalculator.hasPongOrKong(melds, '🀁')) {
                                result += FaanCalculator.ADDITIONAL_FAAN_MAP['matchRoundWind'];
                                details.push({
                                    name: Glossaary_1.default.get()['roundWind'],
                                    value: FaanCalculator.ADDITIONAL_FAAN_MAP['matchRoundWind'],
                                });
                            }
                            break;
                        case 'west':
                            if (FaanCalculator.hasPongOrKong(melds, '🀂')) {
                                result += FaanCalculator.ADDITIONAL_FAAN_MAP['matchRoundWind'];
                                details.push({
                                    name: Glossaary_1.default.get()['roundWind'],
                                    value: FaanCalculator.ADDITIONAL_FAAN_MAP['matchRoundWind'],
                                });
                            }
                            break;
                        case 'north':
                            if (FaanCalculator.hasPongOrKong(melds, '🀃')) {
                                result += FaanCalculator.ADDITIONAL_FAAN_MAP['matchRoundWind'];
                                details.push({
                                    name: Glossaary_1.default.get()['roundWind'],
                                    value: FaanCalculator.ADDITIONAL_FAAN_MAP['matchRoundWind'],
                                });
                            }
                            break;
                        default:
                    }
                }
                if (config['extraTiles']) {
                    const faanFromExtraTiles = FaanCalculator.calculateFaanFromExtraTiles(config);
                    result += faanFromExtraTiles;
                    if (faanFromExtraTiles > 0) {
                        details.push({
                            name: Glossaary_1.default.get()['flowers'],
                            value: faanFromExtraTiles,
                        });
                    }
                }
            }
            const isSmallDragon = HandTypeFinder_1.default.isSmallDragon(winningHand);
            if (isSmallDragon) {
                result += FaanCalculator.FAAN_MAP['smallDragons'];
                details.push({
                    name: Glossaary_1.default.get()['smallDragon'],
                    value: FaanCalculator.FAAN_MAP['smallDragons'],
                });
            }
            if (HandTypeFinder_1.default.isAllInTriplets(winningHand)) {
                result += FaanCalculator.FAAN_MAP['allInTriplets'];
                details.push({
                    name: Glossaary_1.default.get()['allInTriplets'],
                    value: FaanCalculator.FAAN_MAP['allInTriplets'],
                });
            }
            else if (HandTypeFinder_1.default.isCommonHand(winningHand)) {
                result += FaanCalculator.FAAN_MAP['commonHand'];
                details.push({
                    name: Glossaary_1.default.get()['commonHand'],
                    value: FaanCalculator.FAAN_MAP['commonHand'],
                });
            }
            if (HandTypeFinder_1.default.isMixedOrphans(winningHand)) {
                result += FaanCalculator.FAAN_MAP['mixedOrphans'];
                details.push({
                    name: Glossaary_1.default.get()['mixedOrphans'],
                    value: FaanCalculator.FAAN_MAP['mixedOrphans'],
                });
            }
            if (HandTypeFinder_1.default.isAllOneSuit(winningHand)) {
                result += FaanCalculator.FAAN_MAP['allOneSuit'];
                details.push({
                    name: Glossaary_1.default.get()['allOneSuit'],
                    value: FaanCalculator.FAAN_MAP['allOneSuit'],
                });
            }
            else if (HandTypeFinder_1.default.isMixedOneSuit(winningHand)) {
                result += FaanCalculator.FAAN_MAP['mixedOneSuit'];
                details.push({
                    name: Glossaary_1.default.get()['mixedOneSuit'],
                    value: FaanCalculator.FAAN_MAP['mixedOneSuit'],
                });
            }
            let numberOfDragons = 0;
            if (!isSmallDragon && FaanCalculator.hasPongOrKong(melds, '🀄')) {
                result += 1;
                numberOfDragons += 1;
            }
            if (!isSmallDragon && FaanCalculator.hasPongOrKong(melds, '🀅')) {
                result += 1;
                numberOfDragons += 1;
            }
            if (!isSmallDragon && FaanCalculator.hasPongOrKong(melds, '🀆')) {
                result += 1;
                numberOfDragons += 1;
            }
            if (numberOfDragons > 0 && numberOfDragons < 3) {
                details.push({
                    name: Glossaary_1.default.get()['dragons'],
                    value: numberOfDragons,
                });
            }
            return {
                value: result,
                details,
            };
        }
    }
    static hasPongOrKong(melds, tileChar) {
        for (const meld of melds) {
            const meldString = meld.toString();
            if (meldString === tileChar + tileChar + tileChar || meldString === tileChar + tileChar + tileChar + tileChar) {
                return true;
            }
        }
        return false;
    }
    static calculateFaanFromExtraTiles(config) {
        let result = 0;
        if (config['extraTiles']) {
            const { spring, summer, autumn, winter, plum, lily, chrysanthemum, bamboo } = config['extraTiles'];
            const hasAllSeasons = spring && summer && autumn && winter;
            const hasAllFlowers = plum && lily && chrysanthemum && bamboo;
            if (hasAllSeasons) {
                result += FaanCalculator.ADDITIONAL_FAAN_MAP['completeSetOfExtraTiles'];
            }
            if (hasAllFlowers) {
                result += FaanCalculator.ADDITIONAL_FAAN_MAP['completeSetOfExtraTiles'];
            }
            if (spring && !hasAllSeasons) {
                if (config['seatWind'] && config['seatWind'] === 'east') {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['extraTile'];
                }
            }
            if (summer && !hasAllSeasons) {
                if (config['seatWind'] && config['seatWind'] === 'south') {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['extraTile'];
                }
            }
            if (autumn && !hasAllSeasons) {
                if (config['seatWind'] && config['seatWind'] === 'west') {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['extraTile'];
                }
            }
            if (winter && !hasAllSeasons) {
                if (config['seatWind'] && config['seatWind'] === 'north') {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['extraTile'];
                }
            }
            if (plum && !hasAllFlowers) {
                if (config['seatWind'] && config['seatWind'] === 'east') {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['extraTile'];
                }
            }
            if (lily && !hasAllFlowers) {
                if (config['seatWind'] && config['seatWind'] === 'south') {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['extraTile'];
                }
            }
            if (chrysanthemum && !hasAllFlowers) {
                if (config['seatWind'] && config['seatWind'] === 'west') {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['extraTile'];
                }
            }
            if (bamboo && !hasAllFlowers) {
                if (config['seatWind'] && config['seatWind'] === 'north') {
                    result += FaanCalculator.ADDITIONAL_FAAN_MAP['extraTile'];
                }
            }
            return result;
        }
        return 0;
    }
    /**
     * Determine if the inputWinningHand reaches the maximum Faan value.
     * @param inputWinningHand the WinningHand to be evaluated.
     * @returns {boolean} true if the inputWinningHand reaches the maximum Faan value.
     */
    static hasMaxFaan(inputWinningHand, config) {
        return ((0, isThirteenOrphans_1.isThirteenOrphansAsWinningHand)(inputWinningHand) ||
            HandTypeFinder_1.default.isAllKongs(inputWinningHand) ||
            HandTypeFinder_1.default.isOrphans(inputWinningHand) ||
            HandTypeFinder_1.default.isNineGates(inputWinningHand) ||
            HandTypeFinder_1.default.isAllHonors(inputWinningHand) ||
            HandTypeFinder_1.default.isGreatDragon(inputWinningHand) ||
            HandTypeFinder_1.default.isGreatWinds(inputWinningHand) ||
            HandTypeFinder_1.default.isSmallWinds(inputWinningHand) ||
            HandTypeFinder_1.default.isWinByDoubleKong(inputWinningHand, config) ||
            HandTypeFinder_1.default.isKaanKaanHand(inputWinningHand, config));
    }
}
exports.default = FaanCalculator;
FaanCalculator.language = 'en';
/**
 * The Faan value of threshold of a valid winning hand.
 */
FaanCalculator.THRESHOLD_OF_VALID_WINNING_HAND = 3;
/**
 * The maximum Faan value.
 */
// private static MAX_FAAN_VALUE = 100;
/**
 * The dictionary that maps the Faan value of different types of WinningHand.
 */
FaanCalculator.FAAN_MAP = {
    commonHand: 1,
    mixedOrphans: 1,
    allInTriplets: 3,
    mixedOneSuit: 3,
    smallDragons: 5,
    allOneSuit: 7,
};
/**
 * The dictionary that maps the additional Faan value of different winning conditions.
 */
FaanCalculator.ADDITIONAL_FAAN_MAP = {
    selfPick: 1,
    bonusFaanDueToZeroExtraTile: 1,
    fullyConcealedHand: 1,
    matchSeatWind: 1,
    matchRoundWind: 1,
    robbingKong: 1,
    winByLastCatch: 1,
    winByKong: 2,
    extraTile: 1,
    completeSetOfExtraTiles: 2,
    flowerHand: 3,
    // winByDoubleKong: "∞",
    // heavenlyHand: "∞",
    // earthlyHand: "∞",
};
