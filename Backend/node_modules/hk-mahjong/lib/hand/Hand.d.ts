import Tile from '../tile/Tile';
import WinningHand from './WinningHand';
import Meld from '../meld/Meld';
import HandConfig from './HandConfig';
declare class Hand {
    #private;
    /**
     * Minimum number of Tiles required in a Mahjong Hand.
     */
    private static readonly MIN_NUMBER_OF_TILES;
    /**
     * Maximum number of Tiles accepted in a Mahjong Hand.
     */
    private static readonly MAX_NUMBER_OF_TILES;
    /**
     * Construct a Hand.
     * @param inputConfig configuration of constructing a Hand.
     */
    constructor(inputConfig: HandConfig);
    /**
     * Access the unorganized Tiles.
     * @returns {Tile []} the unorganized Tiles.
     */
    getUnorganizedTiles(): Tile[];
    /**
     * Access the Melds formed.
     * @returns {Meld []} the Melds formed.
     */
    getMeldsFormed(): Meld[];
    /**
     * Access all Tiles.
     * @returns {Tile []} an array including all Tiles (either unorganized or from the formed Melds).
     */
    getAllTiles(): Tile[];
    /**
     * Access the string that could represent the Tiles of the Hand.
     * @returns {string} a string that represent the Tiles of the Hand.
     */
    toString(): string;
    /**
     * Determine if two Hands are the same.
     * @param handToBeCompared Hand to be compared.
     * @returns {boolean} true if the two Hands are the same..
     */
    isIdentical(handToBeCompared: Hand): boolean;
    /**
     * Determine if the Hand is a ThirteenOrphans.
     * @returns {boolean} true if the Hand is a ThirteenOrphans.
     */
    isThirteenOrphans(): boolean;
    /**
     * Determine if the Hand is a WinningHand.
     * @returns  {boolean} true if the Hand is a WinningHand.
     */
    isWinningHand(): boolean;
    /**
     * Determine if the Hand is able to be grouped into 5 Melds.
     * @returns  {boolean} true if the Hand is a WinningHand.
     */
    isAbleToGroupAsMelds(): boolean;
    /**
     * Find all possible winning permutations of the Hand.
     * @returns {WinningHand []} all possible winning permutations of the Hand.
     */
    findAllWinningPermutations(): WinningHand[];
}
export default Hand;
