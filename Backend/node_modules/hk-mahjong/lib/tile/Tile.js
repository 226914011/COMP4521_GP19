"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Tile_suit, _Tile_value;
Object.defineProperty(exports, "__esModule", { value: true });
class Tile {
    /**
     * Constructs an instance of Tile.
     * @param suitType
     * @param value
     */
    constructor(tileInput) {
        _Tile_suit.set(this, void 0);
        _Tile_value.set(this, void 0);
        __classPrivateFieldSet(this, _Tile_suit, '', "f");
        __classPrivateFieldSet(this, _Tile_value, 0, "f");
        if (typeof tileInput === 'object') {
            const formattedSuitTypeInput = tileInput.suit.toLowerCase();
            if (this.isValidInput(formattedSuitTypeInput, tileInput.value)) {
                __classPrivateFieldSet(this, _Tile_suit, formattedSuitTypeInput, "f");
                __classPrivateFieldSet(this, _Tile_value, tileInput.value, "f");
            }
            else {
                throw new Error('Invalid input for Tile.');
            }
        }
        else if (typeof tileInput === 'string') {
            if (tileInput.length !== 2) {
                throw new Error('Invalid string input.');
            }
            const codePoint = tileInput.codePointAt(0) || 0;
            if (codePoint >= Tile.BASE_UNICODE && codePoint <= Tile.CEILING_UNICODE) {
                const baseUnicodeOfhonorSuit = Tile.BASE_UNICODE;
                const baseUnicodeOfCharacterSuit = 0x0001f007;
                const baseUnicodeOfBambooSuit = 0x0001f010;
                const baseUnicodeOfDotSuit = 0x0001f019;
                let minUnicodeOfTileSuit;
                if (codePoint >= baseUnicodeOfhonorSuit && codePoint < baseUnicodeOfCharacterSuit) {
                    __classPrivateFieldSet(this, _Tile_suit, 'honor', "f");
                    minUnicodeOfTileSuit = baseUnicodeOfhonorSuit;
                }
                else if (codePoint >= baseUnicodeOfCharacterSuit && codePoint < baseUnicodeOfBambooSuit) {
                    __classPrivateFieldSet(this, _Tile_suit, 'character', "f");
                    minUnicodeOfTileSuit = baseUnicodeOfCharacterSuit;
                }
                else if (codePoint >= baseUnicodeOfBambooSuit && codePoint < baseUnicodeOfDotSuit) {
                    __classPrivateFieldSet(this, _Tile_suit, 'bamboo', "f");
                    minUnicodeOfTileSuit = baseUnicodeOfBambooSuit;
                }
                else {
                    __classPrivateFieldSet(this, _Tile_suit, 'dot', "f");
                    minUnicodeOfTileSuit = baseUnicodeOfDotSuit;
                }
                __classPrivateFieldSet(this, _Tile_value, codePoint - minUnicodeOfTileSuit + 1, "f");
            }
            else {
                throw new Error('Invalid string input.');
            }
        }
        if (__classPrivateFieldGet(this, _Tile_suit, "f") === '' || __classPrivateFieldGet(this, _Tile_value, "f") === 0) {
            throw new Error('Error of instantiating Tile.  Please ensure the input is accurate.');
        }
    }
    getSuit() {
        return __classPrivateFieldGet(this, _Tile_suit, "f");
    }
    getValue() {
        return __classPrivateFieldGet(this, _Tile_value, "f");
    }
    isIdentical(inputTile) {
        const isSameSuit = __classPrivateFieldGet(this, _Tile_suit, "f") === inputTile.getSuit();
        const isSameValue = __classPrivateFieldGet(this, _Tile_value, "f") === inputTile.getValue();
        return isSameSuit && isSameValue;
    }
    isOrphan() {
        return __classPrivateFieldGet(this, _Tile_value, "f") === 1 || __classPrivateFieldGet(this, _Tile_value, "f") === 9;
    }
    ishonor() {
        return __classPrivateFieldGet(this, _Tile_suit, "f") === 'honor';
    }
    toString() {
        return String.fromCodePoint(Tile.BASE_UNICODE + this.computeReferenceIndex());
    }
    computeReferenceIndex() {
        let baseIndex = 0;
        for (const suit in Tile.ALL_SUIT_TYPES) {
            // Requirement of TSLint: for (... in ...) statements must be filtered with an if statement.
            if (Tile.ALL_SUIT_TYPES.hasOwnProperty(suit)) {
                if (__classPrivateFieldGet(this, _Tile_suit, "f") === suit) {
                    return baseIndex + __classPrivateFieldGet(this, _Tile_value, "f") - 1;
                }
                baseIndex += Tile.ALL_SUIT_TYPES[suit]['maxValue'];
            }
        }
        return Tile.INDEX_DENOTING_ERROR_TILE;
    }
    isValidInput(suitTypeInput, valueInput) {
        const typeIsValid = this.validateSuitType(suitTypeInput);
        if (typeIsValid) {
            return this.validateTileValue(suitTypeInput, valueInput);
        }
        else {
            return false;
        }
    }
    validateSuitType(suitTypeInput) {
        for (const suit in Tile.ALL_SUIT_TYPES) {
            if (suitTypeInput === suit) {
                return true;
            }
        }
        return false;
    }
    validateTileValue(suitTypeInput, valueInput) {
        const { minValue, maxValue } = Tile.ALL_SUIT_TYPES[suitTypeInput];
        return valueInput >= minValue && valueInput <= maxValue;
    }
}
exports.default = Tile;
_Tile_suit = new WeakMap(), _Tile_value = new WeakMap();
Tile.MAX_OCCURRENCE_IN_A_MAHJONG_SET = 4;
Tile.BASE_UNICODE = 0x0001f000;
Tile.CEILING_UNICODE = 0x0001f021;
Tile.INDEX_DENOTING_ERROR_TILE = 404;
Tile.ALL_SUIT_TYPES = {
    honor: {
        minValue: 1,
        maxValue: 7,
    },
    character: {
        minValue: 1,
        maxValue: 9,
    },
    bamboo: {
        minValue: 1,
        maxValue: 9,
    },
    dot: {
        minValue: 1,
        maxValue: 9,
    },
};
