import NodeForSearching from './NodeForSearching';
/**
 * This class is the queue frontier that follows the "First In, First Out" principle, and is used for performing Breadth First Search.
 */
declare class QueueFrontier {
    #private;
    /**
     * Construct the queue frontier.
     */
    constructor();
    /**
     * Insert the new node to the end of the frontier.
     * @param node the new node to be inserted to the frontier.
     */
    add(node: NodeForSearching): void;
    /**
     * Check if the frontier contains node that has identical Melds form with the input node.
     * @param inputNode the node to be compared.
     * @returns {boolean} true if the frontier contains node that has identical Melds form with the input node.
     */
    contain(inputNode: NodeForSearching): boolean;
    /**
     * Check if the frontier is empty.
     * @returns {boolean} true if the frontier is empty.
     */
    empty(): boolean;
    /**
     * Remove and return the first node of the frontier.
     * @returns {NodeForSearching} the first node of the frontier.
     */
    remove(): NodeForSearching;
}
export default QueueFrontier;
