import Meld from '../meld/Meld';
import { MeldType } from '../meld/MeldType';
import Tile from '../tile/Tile';
/**
 * This class is the Node used for performing the Breadth First Search.
 */
declare class NodeForSearching {
    #private;
    /**
     * Construct the node.
     * @param unorganizedTiles The array of unorganized Tiles.
     * @param parent The parent node.
     * @param lastAction The last action that was taken to form meld and produces this node from its parent node.
     * @param meldsFormed The array of Melds that have been formed.
     */
    constructor(unorganizedTiles: Tile[], parent: NodeForSearching | null, lastAction: MeldType | null, meldsFormed: Meld[]);
    /**
     * Compare if the Melds formed of two nodes are the same.
     * @param inputNode the node to be compared.
     * @returns {boolean} true if the Melds formed of the two nodes are the same.
     */
    isIdenticalMeldsFormed(inputNode: NodeForSearching): boolean;
    /**
     * Access the unorganized Tiles.
     * @returns {Tile []} unorganized Tiles.
     */
    getUnorganizedTiles(): Tile[];
    /**
     * Access the parent node.
     * @returns {NodeForSearching | null} the parent node.
     */
    getParent(): NodeForSearching | null;
    /**
     * Access the last action.
     * @returns {MeldType | null} last action that was taken to form meld and produces this node from its parent node. Null if the node has no parent node.
     */
    getLastAction(): MeldType | null;
    /**
     * Access the array of formed Melds.
     * @returns {Meld []} the array of Melds that have been formed.
     */
    getMeldsFormed(): Meld[];
    /**
     * Count the occurrences of Tiles in a Meld.
     * @param inputMeld
     * @returns {MeldOccurrencesMap} a dictionary that maps the occurrences of Tiles in the Meld.
     */
    private mapOccurrencesOfTilesInMeld;
}
export default NodeForSearching;
