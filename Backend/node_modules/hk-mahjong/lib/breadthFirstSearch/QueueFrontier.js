"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _QueueFrontier_frontier;
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This class is the queue frontier that follows the "First In, First Out" principle, and is used for performing Breadth First Search.
 */
class QueueFrontier {
    /**
     * Construct the queue frontier.
     */
    constructor() {
        /**
         * The frontier.
         */
        _QueueFrontier_frontier.set(this, void 0);
        __classPrivateFieldSet(this, _QueueFrontier_frontier, [], "f");
    }
    /**
     * Insert the new node to the end of the frontier.
     * @param node the new node to be inserted to the frontier.
     */
    add(node) {
        __classPrivateFieldGet(this, _QueueFrontier_frontier, "f").push(node);
    }
    /**
     * Check if the frontier contains node that has identical Melds form with the input node.
     * @param inputNode the node to be compared.
     * @returns {boolean} true if the frontier contains node that has identical Melds form with the input node.
     */
    contain(inputNode) {
        for (const nodeInFrontier of __classPrivateFieldGet(this, _QueueFrontier_frontier, "f")) {
            if (nodeInFrontier.isIdenticalMeldsFormed(inputNode)) {
                return true;
            }
        }
        return false;
    }
    /**
     * Check if the frontier is empty.
     * @returns {boolean} true if the frontier is empty.
     */
    empty() {
        return __classPrivateFieldGet(this, _QueueFrontier_frontier, "f").length === 0;
    }
    /**
     * Remove and return the first node of the frontier.
     * @returns {NodeForSearching} the first node of the frontier.
     */
    remove() {
        if (this.empty()) {
            throw new Error('Frontier has been empty already.');
        }
        const node = __classPrivateFieldGet(this, _QueueFrontier_frontier, "f")[0];
        __classPrivateFieldGet(this, _QueueFrontier_frontier, "f").shift();
        return node;
    }
}
_QueueFrontier_frontier = new WeakMap();
exports.default = QueueFrontier;
